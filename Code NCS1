clear all
close all
clc
%%

% Assignement 1
ID = [5 3 0 8 7 3 9];
a = ID(1);
b = ID(3);
c = ID(end);
A = [0.3+a-b 0.5-c; 0 1];
B = [0; 1];
C = [1 0; 0 1];
D = [0; 0];

%% Question 1 V2

sys_c = ss(A,B,[],[]);
Poles = [-1+2*i -1-2*i];

K_cl = place(sys_c.A, sys_c.B, Poles);
sys_cl = ss(sys_c.A -sys_c.B*K_cl, sys_c.B, [],[]);
eigv1 = [];
eigv11 = [];

H = [];
% Loop over sampling times
for h =  0.005:0.005:1
        F = expm(sys_c.A * h);
        G = (sys_c.A)^(-1) * (expm(sys_c.A*h) - expm(sys_c.A * 0)) * sys_c.B;
%         G = ((expm(sys_c.A*h) - expm(sys_c.A * 0)) * (sys_c.A)^(-1) )* sys_c.B;

        A_new = F - G*K_cl;
        % Calculate maximum absolute eigenvalue
        eigv1(end+1) = max(abs(eig(A_new)));  
        eigv11(end+1) = max(abs(eig(F)));


        H(end+1) = h;
end
[M,I] = min(eigv1);

% % Plot the stability regions
figure;
plot(H, eigv1) 
hold on
plot(H, eigv11)
plot(H, ones(size(H)), 'r--'); % Plot the line at y=1 in red dashed
ylim([0 4])
xlim([0 0.5])
grid on
legend('Closed loop',' Open loop', ' $$\lambda = 1$$', 'Interpreter', ' latex')
xlabel('Sampling time $$h$$ [s]', 'Interpreter','latex')
ylabel('Spectral radius $$\rho(F - G \bar{K})$$ ', 'Interpreter','latex')

h_stable = H(I); % since at this time the lowest eigenvalues is achieved 

%% Question 2.1

tau_stable = [];
h_stable = [];
h_UNstable= [];
tau_UNstable= [];
Min = [];
H = [];
% Loop over sampling times
for h =  0.005:0.005:0.5
    h
    %     h = 0.25;
    % Loop over system delays (tau)
   for tau = 0.005:0.005:h-0.01
        Fx = expm(sys_c.A * h);
        Fu = sys_c.A^(-1) * (expm(sys_c.A * h) - expm(sys_c.A * (h - tau))) * sys_c.B;
        G1 = (sys_c.A)^(-1) * (expm(sys_c.A * (h - tau)) - expm(sys_c.A * 0)) * sys_c.B;
        F = [Fx, Fu; zeros(1, size(Fx, 2)), 0];
        G = [G1; 1];

        K_bar = [K_cl, 0];
        A_new2 = F - G*K_bar;
        Min(end +1) = max(abs(eig(A_new2)));
        H(end+1) = h;
        index = find(H == 0.25);

        % Calculate maximum absolute eigenvalue
        if max(abs(eig(A_new2))) < 1
            tau_stable(end+1) = tau;        %valid_tau(tau_idx);
            h_stable(end+1) = h;	% sampling_intervals(h_idx);
        else
            tau_UNstable(end+1) = tau;        %valid_tau(tau_idx);
            h_UNstable(end+1) = h;	% sampling_intervals(h_idx);
        end
     end
end

[M,I] = min(Min);
H(I)

% Plot the stability regions
figure;
scatter(h_stable, tau_stable, 'green' ) 
hold on
scatter(h_UNstable, tau_UNstable,'red' ) 
grid on
ylabel('System Delay ($$\tau$$)', 'Interpreter','latex');
xlabel('Sampling time $$h$$ [s]', 'Interpreter','latex')
legend('Stable region',' Unstable region', 'Interpreter', ' latex')
ylim([0 0.3])

%% Question 2.2

tau_stable_2 = [];
h_stable_2 = [];
h_UNstable_2= [];
tau_UNstable_2= [];
eigAnew = [];
H = [];
Tau = [];
j = 0;
i = 0;
% Loop over sampling times
for h = 0.005:0.005:0.35
%for Ku = 0.05:0.05:10
%     Ku
i = i+1;
    h
    H(end+1) = h;
    % Loop over system delays (tau)
    for tau = 0.005:0.005:h-0.001
        j = j+1;
        Tau(end+1) = tau;
        Fx = expm(sys_c.A * h);
        Fu = sys_c.A^(-1) * (expm(sys_c.A * h) - expm(sys_c.A * (h - tau))) * sys_c.B;
        G1 = (sys_c.A)^(-1) * (expm(sys_c.A * (h - tau)) - expm(sys_c.A * 0)) * sys_c.B;
        F = [Fx, Fu; zeros(1, size(Fx, 2)), 0];
        G = [G1; 1];
        Ku = 0.25;
        K_bar = [K_cl, Ku];
        A_new = F - G*K_bar;
%         eigAnew(end+1) =max(abs(eig(A_new))) ;
        max_eigenvalue = max(abs(eig(A_new)));
        eig_values(j, i) = max_eigenvalue;
        % Calculate maximum absolute eigenvalue
        if max(abs(eig(A_new))) < 1
            tau_stable_2(end+1) = tau;        %valid_tau(tau_idx);
            h_stable_2(end+1) = h;	% sampling_intervals(h_idx);

       else
            tau_UNstable_2(end+1) = tau;        %valid_tau(tau_idx);
            h_UNstable_2(end+1) = h;	% sampling_intervals(h_idx);
        end
    end
end

% % Create meshgrid for plotting
[H1, Tau1] = meshgrid(H, Tau);

% Plot the eigenvalues as a function of h and tau
figure(1)
mesh(H1, Tau1, eig_values);
xlabel('h');
ylabel('tau');
zlabel('Max Absolute Eigenvalue');
title('Eigenvalues as a function of h and tau');
% colorbar;


% Plot the stability regions
figure;
scatter(h_stable_2, tau_stable_2, 'green' ) 
hold on
scatter(h_UNstable_2, tau_UNstable_2,'red' ) 
xlabel('Sampling Interval (h)');
ylabel('System Delay (\tau)');
title('Stable delays and sampling time');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Question 3.2

tau_stable_21 = [];
h_stable_21 = [];
h_UNstable_21= [];
tau_UNstable_21= [];

tau_stable_3 = [];
h_stable_3 = [];
h_UNstable_3= [];
tau_UNstable_3= [];
eigv3 = [];
H3 = [];
eigv31 = [];

% Loop over sampling times
% for h =  0.0005:0.0005:0.25
for h = 0.005:0.005:0.5
%for Ku = 0.05:0.05:10
%     Ku
    h
    % Loop over system delays (tau)
    for tau = 0.005:0.005:h-0.001
        h
        Phi = expm(sys_c.A * h);
%         Phi_u1 = ( sys_c.A^(-1) - sys_c.A^(-1) * expm(sys_c.A * h) ) * B + ((sys_c.A^(-2)) + expm(sys_c.A * h) * (sys_c.A^(-1)) * h - exp(sys_c.A * h) * sys_c.A^(-2) ) * (B/h);
%         Phi_u2 = -((sys_c.A^(-2)) + expm(sys_c.A * h) * (sys_c.A^(-1)) * h - exp(sys_c.A * h) * sys_c.A^(-2) ) * (B/h);
        A = sys_c.A;
        Phi_u1 = ( A^(-2) * ( expm(A*h) * sys_c.B - sys_c.B - h *A*sys_c.B) )/h;
        Phi_u2 = (A^(-2) * (h * A * expm(A*h) * sys_c.B - expm(A*h) * sys_c.B + eye(2) * sys_c.B) )/h;

%         Phi_u1 =( (A^(-2)/h)  - (A^(-2)/h)*expm(A*h) + ((A^(-1))* expm(A*h)) + (A^(-1)) - (A^(-1)) * expm(A*h)) * sys_c.B

        F = [Phi Phi_u1 Phi_u2; zeros(1,4); 0 0 1 0];
        G = [0;0;1;0];
        K_3 = [K_cl, 0, 0];
        %For Question 3.3
        K_3 = [K_cl*2, 0.5, 0.9];
        A_new_3 = F - G*K_3;
        % Calculate maximum absolute eigenvalue
        eigv3(end+1) = max(abs(eig(A_new_3)));
        eigv31(end+1) = max(abs(eig(F)));
        H3(end+1) = h; 
       % Calculate maximum absolute eigenvalue
        if eigv3 < 1
            h_stable_21(end+1) = h;	% sampling_intervals(h_idx);
%             for i=0:0.005:h-0.005
             tau_stable_21(end+1) = tau;
%             end
       else
            h_UNstable_21(end+1) = h;	% sampling_intervals(h_idx);
            tau_UNstable_21(end+1) = tau;

        end
    end
end

[M,I] = min(eigv3);

% Plot the stability regions
figure;
scatter(h_stable_21, tau_stable_21, 'green' ) 
hold on
scatter(h_UNstable_21, tau_UNstable_21,'red' ) 
xlabel('Sampling Interval (h)');
ylabel('System Delay (\tau)');
title('Stable delays and sampling time');
grid on


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % Plot the stability regions
figure(32)
plot(H3, eigv3) 
% hold on
% plot(H3, eigv31) 
% plot(H3, ones(size(H3)), 'r--'); % Plot the line at y=1 in red dashed
ylim([0 3])
grid on
legend('Closed loop ($$K_{dynamic})$$',' Open loop', ' $$\lambda = 1$$', 'Closed loop ($$K_{static})$$', 'Interpreter', ' latex')
xlabel('Sampling time $$h$$ [s]', 'Interpreter','latex')
ylabel('Spectral radius $$\rho(A)$$ ', 'Interpreter','latex')

% refline(0,1)

%% Question 4
% The Knowing the sequence of sampling, you may be able to construct the
% exact discrete time system every so many samples: It follows that every 2
% samples we have the state matrices to be the product of the two closed
% loop matrices from before = A(h2) * A(h1)

% determin sequences of h that yield stability
A = sys_c.A;
H4 = [];
h1_stable_4 = [];
h2_stable_4 = [];
h1_UNstable_4 = [];
h2_UNstable_4 = [];

h1_stable_42 = [];
h2_stable_42 = [];
h1_UNstable_42 = [];
h2_UNstable_42 = [];
for h1 =  0.005:0.005:0.6
    h1
        % Matrices for h1
        tau = 0;
        Fx_h1 = expm(sys_c.A * h1);
        Fu_h1 = sys_c.A^(-1) * (expm(sys_c.A * h1) - expm(sys_c.A * (h1 - tau))) * sys_c.B;
        G1 = (sys_c.A)^(-1) * (expm(sys_c.A * (h1 - tau)) - expm(sys_c.A * 0)) * sys_c.B;
%         F_h1_e = [Fx_h1, Fu_h1,  zeros(2,1); 
%                   zeros(1, 4);
%                   zeros(1, size(Fx, 2)), 1, 0];
%         G_h1_e = [G1; 1; 0];
        F_h1_e = [Fx_h1, zeros(2,1), zeros(2,1); zeros(1,4); 0 0 1 0];
        G_h1_e = [G1;1;0];
        K_e = [K_cl, 0, 0];
        A_cl_h1 = F_h1_e - G_h1_e*K_e;

        % Matrices for h2
        for h2 =  0.005:0.005:1
            Phi = expm(sys_c.A * h2);
            Phi_u1 = (A^(-2) *( expm(A*h2) * sys_c.B - sys_c.B - h2 *A*sys_c.B) )/h2;
            Phi_u2 = (A^(-2) * (h2 * A * expm(A*h2) * sys_c.B - expm(A*h2) * sys_c.B + eye(2) * sys_c.B) )/h2;
            F_h2 = [Phi Phi_u1 Phi_u2; zeros(1,4); 0 0 1 0];
            G_h2 = [0;0;1;0];         
            A_cl_h2 = F_h2 - G_h2 * K_e;
            % Calculate maximum absolute eigenvalue
            A_final = A_cl_h2 * A_cl_h1;
            A_final_2 = A_cl_h2 * A_cl_h2 * A_cl_h1;

             % Calculate maximum absolute eigenvalue first sequcne h1 h2
            if max(abs(eig(A_final))) < 1
                h1_stable_4(end+1) = h1;        %valid_tau(tau_idx);
                h2_stable_4(end+1) = h2;	% sampling_intervals(h_idx);
            else
                h1_UNstable_4(end+1) = h1;        %valid_tau(tau_idx);
                h2_UNstable_4(end+1) = h2;	% sampling_intervals(h_idx);
            end

        % Calculate maximum absolute eigenvalue for second sequence h2 h2 h1
            if max(abs(eig(A_final_2))) < 1
                h1_stable_42(end+1) = h1;        % valid_tau(tau_idx);
                h2_stable_42(end+1) = h2;	     % sampling_intervals(h_idx);
            else
                h1_UNstable_42(end+1) = h1;        % valid_tau(tau_idx);
                h2_UNstable_42(end+1) = h2;	       % sampling_intervals(h_idx);
            end

        end
end
%
figure;
scatter(h1_stable_42, h2_stable_42, 'green' ) 
hold on
scatter(h1_UNstable_42, h2_UNstable_42,'red' ) 
xlabel('Sampling Interval (h_1)', 'Interpreter','latex');
ylabel('Sampling Interval (h_2)', 'Interpreter','latex');
legend('Stable', 'Unstable', 'Interpreter','latex');
xlim([0 0.4])
ylim([0 0.3])

figure;
scatter(h1_stable_4, h2_stable_4, 'green' ) 
hold on
scatter(h1_UNstable_4, h2_UNstable_4,'red' ) 
xlabel('Sampling Interval (h_1)', 'Interpreter','latex');
ylabel('Sampling Interval (h_2)', 'Interpreter','latex');
legend('Stable', 'Unstable', 'Interpreter','latex');

%title('Stable sampling times combination for sequence $$h_1, h_2$$');
xlim([0 0.4])
ylim([0 0.3])
%% Question 5
% clear all

ID = [5 3 0 8 7 3 9];
a = ID(1);
b = ID(3);
c = ID(end);
A = [0.3+a-b 0.5-c; 0 1];
B = [0; 1];

sys_c = ss(A,B,[],[]);
A2 = (1/3) * A;
B2 = sys_c.B;
eigv5 = [];
H5 = [];
eigv5_bar = [];
K_cl2 = [];
sys_c2 = ss(A2,B2,[],[]);
Poles = [-1+2*i -1-2*i];
K_cl = place(sys_c.A, sys_c.B, Poles);
K_cl1 = K_cl;
% Poles2 = [-0.3 -0.20];
% K_cl2 = place(sys_c.A, sys_c.B, Poles);

K_cl2 = place(A2, B2, Poles);
K_cl2 = 0.27*K_cl;
P = eig(A2 - B2 * K_cl2);
P1 = eig(sys_c.A - sys_c.B * K_cl1);
K_cl2 = K_cl*0.4;
P = eig(A2 - B2 * K_cl2);

% Loop over sampling times
for h =  0.005:0.005:2
    h
        F2 = expm(sys_c2.A * h);
        G2 = (sys_c2.A)^(-1) * (expm(sys_c2.A*h) - expm(sys_c2.A * 0)) * sys_c2.B;
        A_new2 = F2 - G2*K_cl2;
        A_new2_bar = F2 - G2*K_cl1;
        % Calculate maximum absolute eigenvalue
        eigv5(end+1) = max(abs(eig(A_new2)));
        eigv5_bar(end+1) = max(abs(eig(A_new2_bar)));
        H5(end+1) = h;
end

figure(51);
plot(H5, eigv5) 
hold on
plot(H5, ones(size(H5)), 'r--'); % Plot the line at y=1 in red dashed
plot(H5, eigv5_bar) 
grid on
ylim([0.5 1.5])
xlim([0 1.5])
xlabel('Sampling Interval (h)');
ylabel('Spectral radius $$\rho(F - G K_2)$$ ', 'Interpreter','latex')
legend({'$K_2 \approx 0.4 \bar{K}$', '$\lambda = 1$', '$K_2 = \bar{K}$'}, 'Interpreter', 'latex');
%%
h_stable_zero = [];
h_UNstable_zero = [];
h_stable_hold = [];
h_UNstable_hold = [];

h_UNstable_zero_LMI = [];
h_stable_zero_LMI = [];
h_UNstable_hold_LMI = [];
h_stable_hold_LMI = [];
% K_lc2 = 0.4*K_cl1;
for h =  0.001:0.002:0.35
    h
    % System 2
        F_sys2 = expm(sys_c2.A * h);
        G_sys2 = (sys_c2.A)^(-1) * (expm(sys_c2.A*h) - expm(sys_c2.A * 0)) * sys_c2.B;
    % System 1
        F_sys1 = expm(sys_c.A * h);
        G_sys1 = (sys_c.A)^(-1) * (expm(sys_c.A*h) - expm(sys_c.A * 0)) * sys_c.B;

      % To Hold
        % System 2 packet lost
        F_sys2_hold_lost = [F_sys2 G_sys2; zeros(1,2) 1];
        % System 1 packet lost
        F_sys1_hold_lost = [F_sys1 G_sys1; zeros(1,2) 1];

        % System 2 packet sent
        F_sys2_hold_sent = [F_sys2-G_sys2*K_cl2 zeros(2,1); -K_cl2 0];
        % System 1 packet sent
        F_sys1_hold_sent = [F_sys1-G_sys1*K_cl1 zeros(2,1); -K_cl1 0];


      % To zero (0)
        % System 2 packet lost
        F_sys2_zero_lost = F_sys2;        
        % System 1 packet lost
        F_sys1_zero_lost = F_sys1;

        % System 2 packet sent
        F_sys2_zero_sent = F_sys2 - G_sys2 * K_cl2;    
        % System 1 packet sent
        F_sys1_zero_sent = F_sys1 - G_sys1 * K_cl1;

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Zeros
        S1_cl_1_zero = F_sys1_zero_lost * F_sys1_zero_sent * F_sys1_zero_sent;
        S1_cl_2_zero = F_sys1_zero_lost * (F_sys1_zero_sent^(5));   

        S2_cl_zero = F_sys2_zero_lost * F_sys2_zero_sent;

        % To hold
        S1_cl_1_hold = F_sys1_hold_lost * F_sys1_hold_sent * F_sys1_hold_sent;
        S1_cl_2_hold = F_sys1_hold_lost * (F_sys1_hold_sent^(5));

        S2_cl_hold = F_sys2_hold_lost * F_sys2_hold_sent; 

%         % Optimization for to zero
        Pz = sdpvar(2,2);
        Pz1 = sdpvar(2,2);
       
        cons = [Pz >= eye(2)*1e-3, 
            S1_cl_1_zero' * Pz * S1_cl_1_zero - Pz <= - eye(2),
            S1_cl_2_zero' * Pz * S1_cl_2_zero - Pz <= - eye(2),
                        S2_cl_zero' * Pz * S2_cl_zero - Pz <= - eye(2),

            ];

        cons1 = [Pz1 >= eye(2)*1e-3,            
            S2_cl_zero' * Pz1 * S2_cl_zero - Pz1 <= - eye(2),
            ];
        obj = 0;
        
        S = sdpsettings('solver', 'sedumi');
        result_0 = optimize(cons,obj, S);
        result_01 = optimize(cons1,obj,S)
%         disp(result_0.info)
        value(Pz);
        
        if (max(abs(eig(S1_cl_1_zero))) < 1 && max(abs(eig(S1_cl_2_zero))) < 1 && max(abs(eig(S2_cl_zero))) < 1)
            h_stable_zero(end+1) = 1;
            h_UNstable_zero(end+1) = 0;
        else
            h_stable_zero(end+1) = 0;
            h_UNstable_zero(end+1) = 1;
        end


        if ((result_0.problem == 0) && (result_01.problem == 0))
            h_stable_zero_LMI(end+1) = 1;
            h_UNstable_zero_LMI(end+1) = 0;
        else
            h_stable_zero_LMI(end+1) = 0;
            h_UNstable_zero_LMI(end+1) = 1;
        end

%       % Optimization for to hold
        Ph = sdpvar(3,3);
        Ph1 = sdpvar(3,3);

        Q = eye(3);
        cons_h = [Ph >= eye(3)*2, 
            S2_cl_hold' * Ph * S2_cl_hold - Ph <= - Q,
            ];

        cons_h1 = [Ph >= eye(3)*2, 
            S1_cl_1_hold' * Ph1 * S1_cl_1_hold - Ph1 <= - Q,
            S1_cl_2_hold' * Ph1 * S1_cl_2_hold - Ph1 <= - Q,
                        S2_cl_hold' * Ph1 * S2_cl_hold - Ph1 <= - Q,

            ];

        obj_h = 0;
        S = sdpsettings('solver', 'sedumi');
        result_h = optimize(cons_h,obj_h, S);
        result_h1 = optimize(cons_h1,obj_h, S);
        disp(result_h.info)
        value(Ph)

         if ((result_h.problem == 0) && (result_h1.problem == 0))
            h_stable_hold_LMI(end+1) = 1;
            h_UNstable_hold_LMI(end+1) = 0;
        else
            h_stable_hold_LMI(end+1) = 0;
            h_UNstable_hold_LMI(end+1) = 1;
        end

        if (max(abs(eig(S1_cl_1_hold))) < 1 && max(abs(eig(S1_cl_2_hold))) < 1 && max(abs(eig(S2_cl_hold))) < 1)
            h_stable_hold(end+1) = 1;
            h_UNstable_hold(end+1) = 0;
        else
            h_stable_hold(end+1) = 0;
            h_UNstable_hold(end+1) = 1;
        end


end

%% close all

h_plot =0.001:0.002:h;
figure;
plot(h_plot, h_stable_zero)
hold on
plot(h_plot, h_stable_zero_LMI, ' o')
legend('To-zero method', 'LMI', 'Interpreter','latex')
% hold on
grid on
xlabel('Sampling Interval (h) $$[s]$$', 'Interpreter','latex');
%
figure(52);
plot(h_plot, h_stable_hold, 'r-')
hold on
plot(h_plot, h_stable_hold_LMI, 'o')
legend('To-hold method', ' LMI')
grid on
xlabel('Sampling Interval h $$[s]$$', 'Interpreter','latex');
